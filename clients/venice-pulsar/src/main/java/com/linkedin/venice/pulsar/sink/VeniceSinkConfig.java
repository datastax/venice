/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.linkedin.venice.pulsar.sink;

import java.io.IOException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.pulsar.io.common.IOConfigUtils;
import org.apache.pulsar.io.core.SinkContext;
import org.apache.pulsar.io.core.annotations.FieldDoc;


/**
 * Configuration class for the Sink Connector.
 */
public class VeniceSinkConfig implements Serializable {
  private static final Logger LOGGER = LogManager.getLogger(VeniceSinkConfig.class);

  private static final long serialVersionUID = 1L;

  @FieldDoc(defaultValue = "", help = "The url of the Venice controller")
  private String veniceDiscoveryUrl = "http://venice-controller:5555";

  @FieldDoc(defaultValue = "", help = "The url of the Venice router")
  private String veniceRouterUrl = "http://venice-router:7777";

  @FieldDoc(defaultValue = "", help = "JWT Token for Venice")
  private String veniceToken = "";

  @FieldDoc(defaultValue = "", help = "SASL configuration for Kafka. See Kafka client documentation for details.")
  private String kafkaSaslConfig = "";

  @FieldDoc(defaultValue = "", help = "SASL configuration for Kafka. See Kafka client documentation for details.")
  private String kafkaSaslMechanism = "PLAIN";

  @FieldDoc(defaultValue = "", help = "TLS/SASL configuration for Kafka. See Kafka client documentation for details.")
  private String kafkaSecurityProtocol = "PLAINTEXT";

  @FieldDoc(defaultValue = "", help = "The name of the Venice store")
  private String storeName = "test-store";

  @FieldDoc(defaultValue = "500", help = "Interval in milliseconds to flush data to Venice")
  private long flushIntervalMs = 500L;

  @FieldDoc(defaultValue = "10", help = "Max number of buffered records before flushing to Venice")
  private int maxNumberUnflushedRecords = 10;

  @FieldDoc(defaultValue = "", help = "Additional configuration for the Venice writer")
  private Map<String, String> writerConfig = new HashMap<>();

  public static VeniceSinkConfig load(Map<String, Object> map, SinkContext sinkContext) throws IOException {
    LOGGER.info("Loading config {}", map);
    return IOConfigUtils.loadWithSecrets(map, VeniceSinkConfig.class, sinkContext);
  }

  // Generated by delombok
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig() {
  }

  @java.lang.SuppressWarnings("all")
  public String getVeniceDiscoveryUrl() {
    return this.veniceDiscoveryUrl;
  }

  @java.lang.SuppressWarnings("all")
  public String getVeniceRouterUrl() {
    return this.veniceRouterUrl;
  }

  @java.lang.SuppressWarnings("all")
  public String getVeniceToken() {
    return this.veniceToken;
  }

  @java.lang.SuppressWarnings("all")
  public String getKafkaSaslConfig() {
    return this.kafkaSaslConfig;
  }

  @java.lang.SuppressWarnings("all")
  public String getKafkaSaslMechanism() {
    return this.kafkaSaslMechanism;
  }

  @java.lang.SuppressWarnings("all")
  public String getKafkaSecurityProtocol() {
    return this.kafkaSecurityProtocol;
  }

  @java.lang.SuppressWarnings("all")
  public String getStoreName() {
    return this.storeName;
  }

  @java.lang.SuppressWarnings("all")
  public long getFlushIntervalMs() {
    return this.flushIntervalMs;
  }

  @java.lang.SuppressWarnings("all")
  public int getMaxNumberUnflushedRecords() {
    return this.maxNumberUnflushedRecords;
  }

  @java.lang.SuppressWarnings("all")
  public Map<String, String> getWriterConfig() {
    return writerConfig;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setVeniceDiscoveryUrl(final String veniceDiscoveryUrl) {
    this.veniceDiscoveryUrl = veniceDiscoveryUrl;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setVeniceRouterUrl(final String veniceRouterUrl) {
    this.veniceRouterUrl = veniceRouterUrl;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setKafkaSaslConfig(final String kafkaSaslConfig) {
    this.kafkaSaslConfig = kafkaSaslConfig;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setKafkaSaslMechanism(final String kafkaSaslMechanism) {
    this.kafkaSaslMechanism = kafkaSaslMechanism;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setKafkaSecurityProtocol(final String kafkaSecurityProtocol) {
    this.kafkaSecurityProtocol = kafkaSecurityProtocol;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setVeniceToken(String veniceToken) {
    this.veniceToken = veniceToken;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setStoreName(final String storeName) {
    this.storeName = storeName;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setFlushIntervalMs(final long flushIntervalMs) {
    this.flushIntervalMs = flushIntervalMs;
    return this;
  }

  /**
   * @return {@code this}.
   */
  @java.lang.SuppressWarnings("all")
  public VeniceSinkConfig setMaxNumberUnflushedRecords(final int maxNumberUnflushedRecords) {
    this.maxNumberUnflushedRecords = maxNumberUnflushedRecords;
    return this;
  }

  @java.lang.SuppressWarnings("all")
  public void setWriterConfig(Map<String, String> writerConfig) {
    this.writerConfig = writerConfig;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;
    VeniceSinkConfig that = (VeniceSinkConfig) o;
    return flushIntervalMs == that.flushIntervalMs && maxNumberUnflushedRecords == that.maxNumberUnflushedRecords
        && Objects.equals(veniceDiscoveryUrl, that.veniceDiscoveryUrl)
        && Objects.equals(veniceRouterUrl, that.veniceRouterUrl) && Objects.equals(veniceToken, that.veniceToken)
        && Objects.equals(kafkaSaslConfig, that.kafkaSaslConfig)
        && Objects.equals(kafkaSaslMechanism, that.kafkaSaslMechanism)
        && Objects.equals(kafkaSecurityProtocol, that.kafkaSecurityProtocol)
        && Objects.equals(storeName, that.storeName) && Objects.equals(writerConfig, that.writerConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        veniceDiscoveryUrl,
        veniceRouterUrl,
        veniceToken,
        kafkaSaslConfig,
        kafkaSaslMechanism,
        kafkaSecurityProtocol,
        storeName,
        flushIntervalMs,
        maxNumberUnflushedRecords,
        writerConfig);
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "VeniceSinkConfig(veniceDiscoveryUrl=" + this.getVeniceDiscoveryUrl() + ", veniceRouterUrl="
        + this.getVeniceRouterUrl() + ", kafkaSaslConfig=" + this.getKafkaSaslConfig() + ", kafkaSaslMechanism="
        + this.getKafkaSaslMechanism() + ", kafkaSecurityProtocol=" + this.getKafkaSecurityProtocol() + ", storeName="
        + this.getStoreName() + ", flushIntervalMs=" + this.getFlushIntervalMs() + ", maxNumberUnflushedRecords="
        + this.getMaxNumberUnflushedRecords() + ")";
  }

}
