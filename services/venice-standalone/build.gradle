plugins {
  id 'application'
  id 'com.github.johnrengelman.shadow'
}

application {
  mainClassName = 'com.linkedin.venice.standalone.VeniceStandalone'
  applicationDefaultJvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dservices=" + System.getProperty("services", "*") ]
}
installDist.dependsOn test

dependencies {
  implementation libraries.log4j2core
  implementation libraries.curator
  implementation libraries.kafka
  implementation project(':internal:venice-common')
  implementation project(':clients:da-vinci-client')
  implementation project(':services:venice-controller')
  implementation project(':services:venice-server')
  implementation project(':services:venice-router')
  implementation project(path: ':internal:venice-common')
}

jar {
  manifest {
    attributes = [
        'Implementation-Title': 'Venice Standalone',
        'Implementation-Version': project.version,
        'Main-Class': application.mainClass.get()
    ]
  }
}

run {
  args = ["${project.projectDir}/config"]
}

task generateSslCertificate(type: Exec) {
  def source = file('./../../internal/venice-common/create-ssl-cert.sh')
  def outputDir = file("$buildDir/generated/resources")
  inputs.file(source)
  outputs.dir(outputDir)
  commandLine = [source, outputDir]
}
sourceSets.main.resources.srcDir(generateSslCertificate)

ext {
  jacocoCoverageThreshold = 0.0
}

